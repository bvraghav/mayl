#+TITLE: Finding the fixed point
#+PROPERTY: header-args :results output replace

* What is a fixed point problem?

Any problem where the we can model a function f, such that the
solution to: =f(x) = x= is the required values (or parameters, or
weights) is called a fixed point problem

* Example

Square root of =a=

If we define =f(x) = a/x= then the solution to =f(x) = x= provides us
the answer.

*Update*

Or perhaps not. It provides us an alternating point values of x. So we
use damping, as follows:

=x + f(x) = x + x=, or =x = (x + f(x)) / 2=

And find the fixed point of the dampened function, =x = d(f, x)=;
where =d(f, x) = (x + f(x)) / 2=

* How to find the solution

This problem has been sufficiently spoken about and much
illustrated. Some references may be [[https://www.google.com/search?q=fixed+point+iteration+method][picked up from here]].

Simply put, we plug in 
=x_{i+1} = f(x_i)=

And when necessary, we dampen the divergence using,
=x_{i+1} = (1 + f(x_i))/2=

We terminate, if, either a termination predicate has a signal, or if
we cross max iterations.

* Implementation

#+BEGIN_SRC lisp
  (defun fixed-point (fn term-fn-p
                      &key
                        ((:start start) 0)
                        ((:curr-iter curr-iter) 0)
                        ((:max-iter max-iter) 100))
    (let* ((x (apply fn (list start)))
           (termp (apply term-fn-p (list x start))))
      (print (list x curr-iter))
      (if (or termp
              (>= curr-iter max-iter))
          (list x curr-iter)
          (fixed-point fn term-fn-p 
                       :start x
                       :curr-iter (1+ curr-iter)
                       :max-iter max-iter))))
#+END_SRC

#+RESULTS:

#+BEGIN_SRC lisp
  (fixed-point (lambda (x) (/ 10 x))
               (lambda (x y)
                 (< (abs (- x y))
                    0.001))
               :start 1.05)
#+END_SRC

#+RESULTS:
| 2.4995558 | 37 |

* Application(s)

** Square Root finding
Square root function is a diverging fixed point. So damping the
iteration converges. It is implementd using a more general nth root
fixed point function.

#+BEGIN_SRC lisp
  (defun fixed-fn-nth-root (n a)
    (lambda (x)
      (/ (expt a (1- n)) x)))

  (defun dampened-nth-root (n a)
    (lambda (x)
      (* 0.5
         (+ x
            (apply (fixed-fn-nth-root n a)
                   (list x))))))

#+END_SRC

#+RESULTS:

#+BEGIN_SRC lisp
  (defun square-root (a &optional (precision 0.00001))
    (fixed-point (dampened-nth-root 2 a)
                 (lambda (x y)
                   (< (abs (- x y))
                      precision))
                 :start (/ a 2)))
#+END_SRC

#+RESULTS:

#+BEGIN_SRC lisp
  (print (square-root 559 0.000000001))
#+END_SRC

#+RESULTS:
#+begin_example

(140.75 0) 
(72.360794 1) 
(40.042984 2) 
(27.001492 3) 
(23.852026 4) 
(23.644096 5) 
(23.64318 6) 
(23.64318 7) 
(23.64318 7) 
#+end_example



